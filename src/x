// Function to handle deleting a recipe
function deleteRecipe(recipeId) {
  // Make a DELETE request to the server to delete the recipe
  fetch(`http://localhost:3000/recipes/${recipeId}`, {
    method: 'DELETE'
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('Failed to delete recipe');
    }
    return response.json();
  })
  .then(data => {
    // Show success message
    const messageContainer = document.getElementById('messageContainer');
    messageContainer.textContent = data.message;
    messageContainer.classList.add('show');

    // Hide the message after 2 seconds
    setTimeout(() => {
      messageContainer.classList.remove('show');
    }, 2000);
    

    // Reload recipes
    loadRecipes();
  })
  .catch(error => {
    console.error('Error deleting recipe:', error);
  });
}

// Function to intialize editing a recipe. loads the clicked recipe on a modal
function editRecipe(recipeId) {
  // Make a GET request to fetch the recipe details
  fetch(`http://localhost:3000/recipes/${recipeId}`)
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to fetch recipe details');
      }
      return response.json();
    })
    .then(recipe => {
      // Populate the modal with the recipe details
      const modalTitle = document.querySelector('.modal-title');
      const recipeNameInput = document.getElementById('recipeName');
      const ingredientsTextarea = document.getElementById('ingredients');
      const instructionsTextarea = document.getElementById('instructions');

      modalTitle.textContent = "Edit Recipe";
      recipeNameInput.value = recipe.name;
      ingredientsTextarea.value = recipe.ingredients;
      instructionsTextarea.value = recipe.instructions;

      // Show the modal
      const myModal = new bootstrap.Modal(document.getElementById('recipeModal'));
      myModal.show();
    })
    .catch(error => {
      console.error('Error fetching recipe details:', error);
    });
}

// Function to fetch and display recipes by userID
function loadRecipes() {
  const userId = localStorage.getItem('userID');

  // Make a GET request to fetch recipes for the user
  fetch(`http://localhost:3000/recipes/user/${userId}`)
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to fetch recipes');
      }
      return response.json();
    })
    .then(data => {
      // Process the retrieved recipes and dynamically generate cards for each recipe
      const recipesContainer = document.querySelector('.card-body');
      recipesContainer.innerHTML = ''; // Clear previous content

      if (data && data.length > 0) {
        let rowContainer; // 
        data.forEach((recipe, index) => {
          // Create a new row container for every second recipe
          if (index % 2 === 0) {
            rowContainer = document.createElement('div');
            rowContainer.classList.add('row', 'mb-3');
            recipesContainer.appendChild(rowContainer);
          }
          const instructions = recipe.instructions.split(/\d+\./).filter(instruction => instruction.trim() !== '');
          const instructionList = instructions.map(instruction => `<li>${instruction.trim()}</li>`).join('');
          
          const recipeCard = `
            <div class="col" id="recipeCard-${recipe.recipe_id}">
              <div class="card">
                <div class="card-body">
                  <h5 class="card-title">${recipe.name}</h5>
                  <ul>${instructionList}</ul>
                  <button class="btn btn-success mr-2" onclick="editRecipe(${recipe.recipe_id})">Edit</button>
                  <button class="btn btn-danger" onclick="deleteRecipe(${recipe.recipe_id})">Delete</button>
                </div>
              </div>
            </div>
          `;
          rowContainer.innerHTML += recipeCard;
        });
      } else {
        // No recipes found
        recipesContainer.innerHTML = '<p>No recipes found for this user.</p>';
      }
    })
    .catch(error => {
      console.error('Error fetching recipes:', error);
    });
}

// Call loadRecipes function to initially load recipes
loadRecipes();
